{"ast":null,"code":"var _jsxFileName = \"/Users/sarmiene/Skillcrush/react-JS/super-sticky-notes-reactJS/src/notelist.js\";\nimport React from \"react\";\nimport Note from \"./note\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteList = props => {\n  const filteredNotes = props.notes.filter(note => note.title.toLowerCase().includes(props.searchText.toLowerCase()));\n  // There is alot going on. First props is passed from app.js, props has a notes object. \n  // 1) each note is converted to lowercase, then compared to the lowercase for the text in the (search text)\n  // Filtered notes is the only notes that satisfy the requirement. \n\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"notes-list\",\n    children: filteredNotes.map(note => /*#__PURE__*/_jsxDEV(Note /* this renders a note component for each note */, {\n      note: note,\n      onType: props.onType,\n      removeNote: props.removeNote\n    }, note.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 10\n  }, this);\n};\n_c = NoteList;\nexport default NoteList;\nvar _c;\n$RefreshReg$(_c, \"NoteList\");","map":{"version":3,"names":["React","Note","jsxDEV","_jsxDEV","NoteList","props","filteredNotes","notes","filter","note","title","toLowerCase","includes","searchText","className","children","map","onType","removeNote","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sarmiene/Skillcrush/react-JS/super-sticky-notes-reactJS/src/notelist.js"],"sourcesContent":["import React from \"react\";\nimport Note from \"./note\";\n\nconst NoteList = (props) => {\n\n  const filteredNotes = props.notes.filter((note) => note.title.toLowerCase().includes(props.searchText.toLowerCase()));\n  // There is alot going on. First props is passed from app.js, props has a notes object. \n  // 1) each note is converted to lowercase, then compared to the lowercase for the text in the (search text)\n  // Filtered notes is the only notes that satisfy the requirement. \n\n\n  return <ul className=\"notes-list\">{filteredNotes.map((note) => (\n    <Note /* this renders a note component for each note */\n    key={note.id}\n    note={note}\n    onType={props.onType}\n    removeNote={props.removeNote}\n  />\n  ))}</ul>;\n};\n\nexport default NoteList;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EAE1B,MAAMC,aAAa,GAAGD,KAAK,CAACE,KAAK,CAACC,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACP,KAAK,CAACQ,UAAU,CAACF,WAAW,CAAC,CAAC,CAAC,CAAC;EACrH;EACA;EACA;;EAGA,oBAAOR,OAAA;IAAIW,SAAS,EAAC,YAAY;IAAAC,QAAA,EAAET,aAAa,CAACU,GAAG,CAAEP,IAAI,iBACxDN,OAAA,CAACF,IAAI,CAAC;MAENQ,IAAI,EAAEA,IAAK;MACXQ,MAAM,EAAEZ,KAAK,CAACY,MAAO;MACrBC,UAAU,EAAEb,KAAK,CAACa;IAAW,GAHxBT,IAAI,CAACU,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIb,CACA;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AACV,CAAC;AAACC,EAAA,GAhBIpB,QAAQ;AAkBd,eAAeA,QAAQ;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}