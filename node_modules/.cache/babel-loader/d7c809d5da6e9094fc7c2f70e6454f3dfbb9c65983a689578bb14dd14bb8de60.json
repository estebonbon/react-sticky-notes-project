{"ast":null,"code":"import _objectSpread from\"/Users/sarmiene/Skillcrush/react-JS/super-sticky-notes-reactJS/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from\"react\";import Header from\"./header.js\";import\"./index.css\";import NoteList from\"./notelist\";// this is the main compoent of that file\nconst App=()=>{const[notes,setNotes]=useState(()=>{const savedNotes=localStorage.getItem(\"notes\");return savedNotes?JSON.parse(savedNotes):[];});const[searchText,setSearchText]=useState(\"\");useEffect(()=>{// Save notes to localStorage whenever they change\nlocalStorage.setItem(\"notes\",JSON.stringify(notes));},[notes]);const addNote=()=>{const newNote={id:Date.now(),title:\"\",description:\"\",doesMatchSearch:true};setNotes([newNote,...notes]);};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Header,{addNote:addNote// placeholder\n,searchText:searchText// passes current search text state to header\n,onSearch:text=>setSearchText(text)}),/*#__PURE__*/React.createElement(NoteList,{notes:notes// this pases the current notes state vlue\n,searchText:searchText// Again it is the current value, and it will be used to filter.\n,removeNote:id=>setNotes(notes.filter(note=>note.id!==id)),onType:(id,key,value)=>setNotes(notes.map(note=>// line below is a ternary operator. the []: part will change the value of either the title or descrpition property. other wise note stays unchanged in the new array being made. \nnote.id===id?_objectSpread(_objectSpread({},note),{},{[key]:value}):note))}));};export default App;","map":{"version":3,"names":["React","useState","useEffect","Header","NoteList","App","notes","setNotes","savedNotes","localStorage","getItem","JSON","parse","searchText","setSearchText","setItem","stringify","addNote","newNote","id","Date","now","title","description","doesMatchSearch","createElement","onSearch","text","removeNote","filter","note","onType","key","value","map","_objectSpread"],"sources":["/Users/sarmiene/Skillcrush/react-JS/super-sticky-notes-reactJS/src/App.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport Header from \"./header.js\";\nimport \"./index.css\";\nimport NoteList from \"./notelist\"; // this is the main compoent of that file\n\nconst App = () => {\n  const [notes, setNotes] = useState(() => {\n    const savedNotes = localStorage.getItem(\"notes\");\n    return savedNotes ? JSON.parse(savedNotes) : [];\n  });\n\n  const [searchText, setSearchText] = useState(\"\");\n\n  useEffect(() => {\n    // Save notes to localStorage whenever they change\n    localStorage.setItem(\"notes\", JSON.stringify(notes));\n  }, [notes]);\n  \n\n  const addNote = () => {\n    const newNote = {\n      id: Date.now(),\n      title: \"\",\n      description: \"\",\n      doesMatchSearch: true,\n    };\n    setNotes([newNote, ...notes]);\n  };\n\n  return(\n    <div>\n    <Header\n    addNote={addNote} // placeholder\n    searchText={searchText} // passes current search text state to header\n    onSearch={(text) => setSearchText(text)}\n    />\n    <NoteList\n      notes={notes} // this pases the current notes state vlue\n      searchText={searchText} // Again it is the current value, and it will be used to filter.\n      removeNote={(id) => setNotes(notes.filter((note) => note.id !== id))}\n      onType={(id, key, value) => \n        setNotes(\n          notes.map((note) => // line below is a ternary operator. the []: part will change the value of either the title or descrpition property. other wise note stays unchanged in the new array being made. \n              note.id === id ? {...note, [key]: value} : note\n          )\n        )\n      }\n    />\n    </div>\n  )\n};\n\nexport default App\n"],"mappings":"mJAAA,MAAO,CAAAA,KAAK,EAAGC,QAAQ,CAAEC,SAAS,KAAO,OAAO,CAChD,MAAO,CAAAC,MAAM,KAAM,aAAa,CAChC,MAAO,aAAa,CACpB,MAAO,CAAAC,QAAQ,KAAM,YAAY,CAAE;AAEnC,KAAM,CAAAC,GAAG,CAAGA,CAAA,GAAM,CAChB,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGN,QAAQ,CAAC,IAAM,CACvC,KAAM,CAAAO,UAAU,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAChD,MAAO,CAAAF,UAAU,CAAGG,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAG,EAAE,CACjD,CAAC,CAAC,CAEF,KAAM,CAACK,UAAU,CAAEC,aAAa,CAAC,CAAGb,QAAQ,CAAC,EAAE,CAAC,CAEhDC,SAAS,CAAC,IAAM,CACd;AACAO,YAAY,CAACM,OAAO,CAAC,OAAO,CAAEJ,IAAI,CAACK,SAAS,CAACV,KAAK,CAAC,CAAC,CACtD,CAAC,CAAE,CAACA,KAAK,CAAC,CAAC,CAGX,KAAM,CAAAW,OAAO,CAAGA,CAAA,GAAM,CACpB,KAAM,CAAAC,OAAO,CAAG,CACdC,EAAE,CAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CACdC,KAAK,CAAE,EAAE,CACTC,WAAW,CAAE,EAAE,CACfC,eAAe,CAAE,IACnB,CAAC,CACDjB,QAAQ,CAAC,CAACW,OAAO,CAAE,GAAGZ,KAAK,CAAC,CAAC,CAC/B,CAAC,CAED,mBACEN,KAAA,CAAAyB,aAAA,yBACAzB,KAAA,CAAAyB,aAAA,CAACtB,MAAM,EACPc,OAAO,CAAEA,OAAS;AAAA,CAClBJ,UAAU,CAAEA,UAAY;AAAA,CACxBa,QAAQ,CAAGC,IAAI,EAAKb,aAAa,CAACa,IAAI,CAAE,CACvC,CAAC,cACF3B,KAAA,CAAAyB,aAAA,CAACrB,QAAQ,EACPE,KAAK,CAAEA,KAAO;AAAA,CACdO,UAAU,CAAEA,UAAY;AAAA,CACxBe,UAAU,CAAGT,EAAE,EAAKZ,QAAQ,CAACD,KAAK,CAACuB,MAAM,CAAEC,IAAI,EAAKA,IAAI,CAACX,EAAE,GAAKA,EAAE,CAAC,CAAE,CACrEY,MAAM,CAAEA,CAACZ,EAAE,CAAEa,GAAG,CAAEC,KAAK,GACrB1B,QAAQ,CACND,KAAK,CAAC4B,GAAG,CAAEJ,IAAI,EAAK;AAChBA,IAAI,CAACX,EAAE,GAAKA,EAAE,CAAAgB,aAAA,CAAAA,aAAA,IAAOL,IAAI,MAAE,CAACE,GAAG,EAAGC,KAAK,GAAIH,IAC/C,CACF,CACD,CACF,CACI,CAAC,CAEV,CAAC,CAED,cAAe,CAAAzB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}